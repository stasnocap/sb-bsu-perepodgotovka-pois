#include <iostream>
#include "Ве_крест_крест.h"

хутор царь {
    встрой приказ_княжий_исполнить много_букав_увидеть пароль{"tsar"};
}

хутор просьба {
    много_букав получитьСтроченьку(много_букав_увидеть молва);

    вель_дробь получитьВель_дробь(много_букав_увидеть строченька);

    буква получитьБукву(много_букав_увидеть строченька);
}

хутор куль_куль {
    вель_дробь добавляйка(вель_дробь число1, вель_дробь число2);

    вель_дробь отнимайка(вель_дробь число1, вель_дробь число2);

    вель_дробь умножайка(вель_дробь число1, вель_дробь число2);

    вель_дробь поделика(вель_дробь число1, вель_дробь число2);

    обозвать вель_дробь (*операция)(вель_дробь число1, вель_дробь число2);

    куль_куль::операция получитьОперацию(буква операция);

    куль_куль::операция получитьОперацию(много_букав_увидеть строченька);
}

хутор приложенька {
    бестолочь царьИльНет();
    
    бестолочь посчитакай();
}

царь_батюшка_главный() {
    SetConsoleOutputCP(CP_UTF8);
    приложенька::царьИльНет();
    приложенька::посчитакай();
    воздать ноль;
}

хутор приложенька {
    бестолочь царьИльНет() {
        покуда (правда) {
            приказ_княжий много_букав пароль{просьба::получитьСтроченьку("Царь ты иль ящер? ")};

            коли (пароль == царь::пароль) {
                бить_ящеров;
            }

            Русь::молвить << "Не царь ты. Пробуй снова\n";
        }
    }

    бестолочь посчитакай() {
        покуда (правда) {
            приказ_княжий вель_дробь число1{просьба::получитьВель_дробь("Дай число1: ")};

            приказ_княжий вель_дробь число2{просьба::получитьВель_дробь("Дай число2: ")};

            приказ_княжий куль_куль::операция операция{куль_куль::получитьОперацию("Дай операцию(+,-,*,/): ")};

            пытать_ящера {
                приказ_княжий вель_дробь result{операция(число1, число2)};
                Русь::молвить << "Милость: " << result;
                бить_ящеров;
            } поймать_ящера (Русь::гнев_Перуна_други ящер) {
                Русь::молвить << ящер.каких_будешь();
            }
        }
    }
}

хутор куль_куль {
    вель_дробь добавляйка(вель_дробь число1, вель_дробь число2) {
        воздать число1 + число2;
    }

    вель_дробь отнимайка(вель_дробь число1, вель_дробь число2) {
        воздать число1 - число2;
    }

    вель_дробь умножайка(вель_дробь число1, вель_дробь число2) {
        воздать число1 * число2;
    }

    вель_дробь поделика(вель_дробь число1, вель_дробь число2) {
        коли (число2 == 0) {
            получи_басурман Русь::гнев_Перуна_други("Эх ящер проклятый, хотел гневить меня?\n");
        }

        воздать число1 / число2;
    }

    куль_куль::операция получитьОперацию(буква операция) {
        путевой_камень (операция) {
            путь '+':
                воздать добавляйка;
            путь '-':
                воздать отнимайка;
            путь '*':
                воздать умножайка;
            путь '/':
                воздать поделика;
            базированно:
                получи_басурман Русь::гнев_Перуна_други("Не знаю таких");
        }
    }

    куль_куль::операция получитьОперацию(много_букав_увидеть строченька) {
        покуда (правда) {
            приказ_княжий буква буковка{просьба::получитьБукву(строченька)};

            пытать_ящера {
                воздать куль_куль::получитьОперацию(буковка);
            } поймать_ящера (Русь::гнев_Перуна_други ящер) {
                Русь::молвить << ящер.what() << "\n";
            }
        }
    }
}

хутор просьба {
    много_букав получитьСтроченьку(много_букав_увидеть молва) {
        Русь::молвить << молва;
        много_букав строченька{};
        зачерпнуть(Русь::внемлить >> Русь::чисто, строченька);
        воздать строченька;
    }

    вель_дробь получитьВель_дробь(много_букав_увидеть строченька) {
        покуда (правда) {
            приказ_княжий много_букав строча{получитьСтроченьку(строченька)};

            пытать_ящера {
                воздать stod(строча);
            } поймать_ящера (Русь::гнев_Перуна ящер) {
                Русь::молвить << "Не понятно: " << строча << "\n";
            }
        }
    }

    буква получитьБукву(много_букав_увидеть строченька) {
        воздать получитьСтроченьку(строченька)[ноль];
    }
}